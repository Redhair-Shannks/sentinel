import axios from "axios";

async function main() {
  // API configuration
  const apiKey = "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";
  const baseURL = "https://openrouter.ai/api/v1";
  const url = ${baseURL}/chat/completions;

  // Example data (replace with actual data)
  const transcript = Hey everyone, today we're building a web app to summarize and get the gist out of product review videos on YouTube. I was inspired to make this app because I realized before I make a technological purchase, what I do is always to go to YouTube and watch some review videos, and these videos are made by people whose life it is to compare these products. They know features that I know nothing about; they have criteria that I'm completely not familiar with, and that's exactly why these videos are worth watching. But if you don't have the time to watch these videos and you still want to get the gist of the information, you can use this app. ...;

  const views = 50000;
  const likes = 1500;
  const upload_date = "2023-05-15";

  // Comments JSON example (each comment includes text, likes, hearted, timestamp, replies, and sentiment)
  const comments_json = `
[
    {
        "text": "Amazing content! Really useful tutorial.",
        "likes": 45,
        "hearted": true,
        "timestamp": "2023-05-16T10:30:00Z",
        "replies": 5,
        "sentiment": "positive"
    },
    {
        "text": "The video was a bit unclear in some parts.",
        "likes": 10,
        "hearted": false,
        "timestamp": "2023-05-16T12:00:00Z",
        "replies": 2,
        "sentiment": "negative"
    },
    {
        "text": "Neutral observation: the tutorial is okay, but could use some polish.",
        "likes": 5,
        "hearted": false,
        "timestamp": "2023-05-16T13:00:00Z",
        "replies": 1,
        "sentiment": "neutral"
    }
    // ... add more comments as needed
]
`;

  // Construct the full prompt template
  const prompt = `
Below is data from a YouTube video including its auto-generated transcript, video analytics, and audience comments.

Video Transcript (auto-generated by YouTube, capturing the flow of conversation):
${transcript}

Video Analytics:
- Views: ${views}
- Likes: ${likes}
- Upload Date: ${upload_date}

Comments Data (in JSON format):
Each comment includes:
  - "text": the comment text,
  - "likes": number of likes on the comment,
  - "hearted": whether the comment is hearted by the author,
  - "timestamp": when the comment was posted,
  - "replies": number of replies,
  - "sentiment": the comment's sentiment (positive, neutral, or negative) as determined by the Roberto model.
${comments_json}

Your tasks as a professional YouTube reviewer and advisor are as follows:
1. Analyze the transcript to summarize what the video is about and identify its theme.
2. List the pros of the video by analyzing the positive comments.
3. List the cons of the video by analyzing the negative comments, and provide a constructive review with concrete, domain-specific suggestions for improvement based on these criticisms.
4. Generate an overall report showing the audience's perception of the video. To do this, compute the weighted ratio of positive, neutral, and negative comments by increasing each comment's like count by 1. Apply an outlier handling method (such as outlier capping) to mitigate the influence of any extreme like counts.

Please ensure your response is clear, structured, and professional.
`;

  // Construct the request payload
  const payload = {
    model: "deepseek/deepseek-r1:free",
    messages: [
      {
        role: "user",
        content: prompt,
      },
    ],
    // Optionally add other parameters like temperature or max_tokens if needed.
  };

  // Set the request headers (include optional headers if desired)
  const headers = {
    "Authorization": Bearer ${apiKey},
    "Content-Type": "application/json",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional: replace with your site URL
    "X-Title": "<YOUR_SITE_NAME>",     // Optional: replace with your site name
  };

  try {
    const response = await axios.post(url, payload, { headers });
    console.log("Response from Deepseek:", response.data);
  } catch (error) {
    console.error("Error calling Deepseek API:", error);
  }
}

main();